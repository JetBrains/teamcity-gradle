import com.github.jk1.license.render.JsonReportRenderer

import java.nio.file.Paths

plugins {
  id "com.github.jk1.dependency-license-report" version "1.17"
}

initializeWorkspace()

ext {
  teamcityVersion = anyParam('teamcityVersion') ?: '2021.2'
  versionNumber = anyParam('PluginVersion') ?: teamcityVersion
}
def localRepo = anyParamPath('TC_LOCAL_REPO')
def localGradleRepo = anyParamPath('TC_GRADLE_LOCAL_REPO') ?: anyParamPath('TC_LOCAL_REPO') ?: rootProject.projectDir.toPath().resolve('local-gradle-repo')

version = versionNumber

allprojects {
  group = 'org.jetbrains.teamcity.plugins'
  version = versionNumber

  repositories {
    if (localRepo) {
      maven {
        name = "local-teamcity-artifacts"
        url "file:///${localRepo}"
      }
    }
    mavenLocal()
    maven { url "https://repo.labs.intellij.net/teamcity" }
    maven {
      name = "jetbrains-teamcity"
      url = "https://download.jetbrains.com/teamcity-repository"
    }
    maven { url 'https://repo.gradle.org/gradle/libs-releases' }
    mavenCentral()
  }

}

subprojects {
  apply plugin: "java"
  apply plugin: 'maven-publish'

  java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
  }

  test.useTestNG()
  jar.archiveVersion.set('')

  publishing {
    publications {
      myLib(MavenPublication) {
        from components.java
      }
    }
    repositories {
      maven {
        url = "file:${localGradleRepo.toAbsolutePath()}"
      }
    }
  }
}

licenseReport {
  renderers = [ new JsonReportRenderer('third-party-libs.json') ]
}

def anyParamPath(String... names) {
  def param = anyParam(names);
  if (param == null || param.isEmpty())
    return null
  return (Paths.get(param).isAbsolute()) ?
         Paths.get(param) : getRootDir().toPath().resolve(param)
}

def anyParam(String... names) {
  def param
  try {
    param = names.findResult {
      project.hasProperty(it) ? project.getProperty(it) : System.getProperty(it) ?: System.getenv(it) ?: null
    }
    if (param == null || param.isEmpty())
      param = null
  } finally {
    println("AnyParam: $names -> $param")
  }
  return param
}

def initializeWorkspace() {
  if (System.getProperty("idea.active") != null) {
    println "Attempt to configure workspace in IDEA"
    def coreVersionProperties = project.projectDir.toPath().parent.parent.resolve(".version.properties")
    if (coreVersionProperties.toFile().exists()) {
      def p = new Properties().tap {
        it.load(new FileInputStream(coreVersionProperties.toFile()))
      }
      p.forEach { k,v ->
        System.setProperty(k, v);
      }
    }
  }
}