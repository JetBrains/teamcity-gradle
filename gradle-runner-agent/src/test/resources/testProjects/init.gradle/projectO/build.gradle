apply plugin: "java"

import org.gradle.api.internal.tasks.testing.*

task custom(type: CustomTask) {
  binResultsDir = new File("build")
  reports {
    html.enabled = true
    junitXml.enabled = true
    reports.junitXml.destination = new File('build')
    reports.html.destination = new File('build')
  }
}

class CustomTask extends AbstractTestTask {
  protected CustomTestExecutionSpec createTestExecutionSpec() { new CustomTestExecutionSpec() }

  protected CustomTestExecuter createTestExecuter() { new CustomTestExecuter() }
}

class CustomTestExecutionSpec implements TestExecutionSpec {}

class CustomTestExecuter implements TestExecuter<CustomTestExecutionSpec> {
  void execute(CustomTestExecutionSpec testExecutionSpec, TestResultProcessor testResultProcessor) {
    def time = new TestTime()
    testResultProcessor.started(new DefaultTestSuiteDescriptor("suite", "org.jetbrains"), new TestStartEvent(time.next))
    [
            [
                    className       : "Foo1",
                    name            : "bar1",
                    classDisplayName: "Foo display name 1",
                    displayName     : "bar display name 1"
            ], [
                    className       : "org.jetbrains.Foo2",
                    name            : "bar2",
                    classDisplayName: "Foo display name 2",
                    displayName     : "bar display name 2"
            ], [
                    className       : "Foo3",
                    name            : "bar3()",
                    classDisplayName: "Foo display name 3",
                    displayName     : "bar display name 3"
            ], [
                    className       : "Foo4",
                    name            : "bar4(String)[1]",
                    classDisplayName: "Foo display name 4",
                    displayName     : "bar display name 4"
            ], [
                    className       : "Foo5",
                    name            : "bar5",
                    classDisplayName: "Foo display name 5",
                    displayName     : "bar5()"
            ], [
                    className       : "Foo6",
                    name            : "bar6"
            ], [
                    className       : "Foo7",
                    name            : "bar7()",
                    classDisplayName: "Foo display name 7",
                    displayName     : "param1, param2"
            ], [
                    className       : "Foo8",
                    name            : "bar8()",
                    classDisplayName: "Foo display name 8",
                    displayName     : "test()"
            ]
    ].forEach { test ->
      testResultProcessor.with {
        started(new DefaultTestDescriptor(test.className, test.className, test.name, test.classDisplayName, test.displayName ?: test.name), new TestStartEvent(time.next))
        completed(test.className, new TestCompleteEvent(time.next))
      }
    }

    testResultProcessor.completed("suite", new TestCompleteEvent(time.next))
  }

  void stopNow() {}

  class TestTime {
    long time

    long getNext() {
      time += 100
    }
  }
}
