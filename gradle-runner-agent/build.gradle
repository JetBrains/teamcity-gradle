/*
 * Copyright 2000-2022 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'com.github.rodm.teamcity-agent' version "1.4.1"
}

teamcity {
    version = teamcityVersion
    agent {
        descriptor = project.file('src/main/resources/META-INF/build-agent-plugin-gradle-runner.xml')
        files {
            into("scripts") {
                from(project.file("src/main/scripts"))
            }
        }
    }
}

sourceSets.main.java.srcDirs += 'src/main/scripts'

dependencies {
    implementation project(':gradle-runner-common')
    compileOnly "org.jetbrains.teamcity:agent-api:${teamcityVersion}",
            "org.jetbrains.teamcity.internal:agent:${teamcityVersion}",
            "org.jetbrains.teamcity:common-api:${teamcityVersion}"
    testImplementation fileTree(dir: teamcityLibs, include: ['*.jar'], exclude: ['httpcore*.jar', 'httpclient*.jar']),
            fileTree(dir: teamcityTestLibs, include: ['*.jar']),
            fileTree(dir: teamcityAgentLibs, include: ['*.jar'])

}

agentPlugin {
    archiveVersion.set('')
    archiveBaseName.set('gradle-agent')
}

tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    ivy {
        url = uri("https://services.gradle.org/distributions")
        patternLayout {
            artifact '[artifact]-[revision]-bin.[ext]'
        }
        metadataSources { artifact() }
    }
}

task downloadDistributive {
    doLast {
        def versions = ["2.0", "2.5", "4.0.2", "3.4.1", "4.4", "4.10.3", "5.6.4", "6.5.1"]
        versions.each { version ->
            if (new File("../.tools/gradle/gradle-$version").exists()) return
            def configuration = configurations.detachedConfiguration()
            configuration.transitive = false
            configuration.dependencies.add(dependencies.create("org.jetbrains.teamcity:gradle:$version@zip"))
            copy {
                from zipTree(configuration.singleFile)
                into "../.tools/gradle"
            }
        }
    }
}

tasks.test.dependsOn("downloadDistributive")
