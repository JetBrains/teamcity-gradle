
plugins {
    id 'com.github.rodm.teamcity-agent' version "1.5.2"
}

teamcity {
    version = teamcityVersion
    agent {
        descriptor {
        }
        files {
            into("scripts") {
                from(project.file("src/main/scripts"))
            }
        }
    }
}

sourceSets.main.java.srcDirs += 'src/main/scripts'

dependencies {
    implementation project(':gradle-runner-common')
    implementation 'org.gradle:gradle-tooling-api:8.2.1'
    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation 'commons-cli:commons-cli:1.4'
    compileOnly "org.jetbrains.teamcity:agent-api:${teamcityVersion}",
            "org.jetbrains.teamcity.internal:agent:${teamcityVersion}",
            "org.jetbrains.teamcity:common-api:${teamcityVersion}"
}

agentPlugin {
    archiveVersion.set('')
    archiveBaseName.set('gradle-agent')
}

tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    maven { url = uri("https://repo.gradle.org/gradle/libs-releases") }
    ivy {
        url = uri("https://services.gradle.org/distributions")
        patternLayout {
            artifact '[artifact]-[revision]-bin.[ext]'
        }
        metadataSources { artifact() }
    }
}

task downloadDistributive {
    doLast {
        def versions = ["2.0", "2.5", "4.0.2", "3.4.1", "4.4", "4.10.3", "5.6.4", "6.5.1", "8.2"]
        versions.each { version ->
            if (new File("../.tools/gradle/gradle-$version").exists()) return
            def configuration = configurations.detachedConfiguration()
            configuration.transitive = false
            configuration.dependencies.add(dependencies.create("org.jetbrains.teamcity:gradle:$version@zip"))
            copy {
                from zipTree(configuration.singleFile)
                into "../.tools/gradle"
            }
        }
    }
}

tasks.test.dependsOn("downloadDistributive")